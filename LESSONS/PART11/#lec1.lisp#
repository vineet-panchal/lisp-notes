; Part 11 - Lecture 1

; Binary Search Trees (BSTs)
; => keys that are less than the parent are found in the left subtree
; => keys that are greater than the parent are found in the right subtree
; Example of a BST:
;        70
;        /\
;      31  93
;     /     /\
;   14    73 94
;  /
; 23

; Benefits of a BST:
; => maintains a sorted collection of objects
; => guarantees O(h), h is the height of the tree, for all main operations: search, insertion, modification, and deletion

; Ex: Draw the BST from the list of keys (68 88 61 89 94 50 4 76 66 82)
;         68
;       /    \
;     61      88
;    /  \    /  \
;   50  66 76    89
;  /         \    \
; 4           82   94

; BST Implementation
(defstruct (node (:conc-name nil))
  key ; object stored in the node
  (lc nil) (rc nil)) ; left and right children of the node

(defun bst-insert (obj bst comp)
"Inserts obj in bst destructively, i.e., modifying the tree"
  (if (null bst) (make-node :key obj)
      (let ((root (key bst))
            (left (lc bst))
            (right (rc bst)))
        (cond ((funcall comp obj root) (setf (lc bst) (bst-insert obj left comp)))
              ((funcall comp root obj) (setf (rc bst) (bst-insert obj right comp)))
              (t bst))
        bst)))

RTL-USER> (bst-insert 1 nil #'<)
#S(NODE :KEY 1 :LC NIL :RC NIL)
RTL-USER> (bst-insert 2 (bst-insert 1 nil #'<) #'<)
;#S
(NODE :KEY 1
      :LC NIL
      :RC #S(NODE :KEY 2 :LC NIL :RC NIL))